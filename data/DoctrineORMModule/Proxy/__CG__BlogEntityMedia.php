<?php

namespace DoctrineORMModule\Proxy\__CG__\Blog\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Media extends \Blog\Entity\Media implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'user', 'slug', 'publicdir', 'posts', 'profiles', 'dog', 'dogs', 'metadatas', 'file', 'width', 'height', 'csspercent', 'date');
        }

        return array('__isInitialized__', 'id', 'user', 'slug', 'publicdir', 'posts', 'profiles', 'dog', 'dogs', 'metadatas', 'file', 'width', 'height', 'csspercent', 'date');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Media $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', array($slug));

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', array());

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\User\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setDog(\Sc\Entity\Dog $dog = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDog', array($dog));

        return parent::setDog($dog);
    }

    /**
     * {@inheritDoc}
     */
    public function getDog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDog', array());

        return parent::getDog();
    }

    /**
     * {@inheritDoc}
     */
    public function getUri()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUri', array());

        return parent::getUri();
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setWidth($width = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWidth', array($width));

        return parent::setWidth($width);
    }

    /**
     * {@inheritDoc}
     */
    public function getWidth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidth', array());

        return parent::getWidth();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeight($height = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeight', array($height));

        return parent::setHeight($height);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeight', array());

        return parent::getHeight();
    }

    /**
     * {@inheritDoc}
     */
    public function setCsspercent($csspercent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCsspercent', array($csspercent));

        return parent::setCsspercent($csspercent);
    }

    /**
     * {@inheritDoc}
     */
    public function getCsspercent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCsspercent', array());

        return parent::getCsspercent();
    }

    /**
     * {@inheritDoc}
     */
    public function getSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSize', array());

        return parent::getSize();
    }

    /**
     * {@inheritDoc}
     */
    public function getPosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosts', array());

        return parent::getPosts();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, $params)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', array($method, $params));

        return parent::__call($method, $params);
    }

    /**
     * {@inheritDoc}
     */
    public function getThing($what)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThing', array($what));

        return parent::getThing($what);
    }

    /**
     * {@inheritDoc}
     */
    public function getThings($what)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThings', array($what));

        return parent::getThings($what);
    }

    /**
     * {@inheritDoc}
     */
    public function addThing($what, $thing)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addThing', array($what, $thing));

        return parent::addThing($what, $thing);
    }

    /**
     * {@inheritDoc}
     */
    public function addThings($what, \Doctrine\Common\Collections\Collection $things)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addThings', array($what, $things));

        return parent::addThings($what, $things);
    }

    /**
     * {@inheritDoc}
     */
    public function removeThing($what, $thing)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeThing', array($what, $thing));

        return parent::removeThing($what, $thing);
    }

    /**
     * {@inheritDoc}
     */
    public function removeThings($what, \Doctrine\Common\Collections\Collection $things)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeThings', array($what, $things));

        return parent::removeThings($what, $things);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllThings($what)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllThings', array($what));

        return parent::removeAllThings($what);
    }

    /**
     * {@inheritDoc}
     */
    public function addMetadata(\Blog\Entity\MediaMetadata $metadata)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMetadata', array($metadata));

        return parent::addMetadata($metadata);
    }

    /**
     * {@inheritDoc}
     */
    public function addMetadatas(\Doctrine\Common\Collections\Collection $metadatas)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMetadatas', array($metadatas));

        return parent::addMetadatas($metadatas);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllMetadatas()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllMetadatas', array());

        return parent::removeAllMetadatas();
    }

    /**
     * {@inheritDoc}
     */
    public function removeMetadatas(\Doctrine\Common\Collections\Collection $metadatas)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMetadatas', array($metadatas));

        return parent::removeMetadatas($metadatas);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetadatas()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetadatas', array());

        return parent::getMetadatas();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocalizedMetadata($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocalizedMetadata', array($locale));

        return parent::getLocalizedMetadata($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLocalizedMetadata($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLocalizedMetadata', array($locale));

        return parent::hasLocalizedMetadata($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function setDate(\DateTime $time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($time));

        return parent::setDate($time);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getSrc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSrc', array());

        return parent::getSrc();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublicdir($publicdir)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublicdir', array($publicdir));

        return parent::setPublicdir($publicdir);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublicdir()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublicdir', array());

        return parent::getPublicdir();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile(\Blog\Entity\File $file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', array($file));

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', array());

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', array($locale));

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLocale', array());

        return parent::hasLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', array());

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function isOwnedBy(\User\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOwnedBy', array($user));

        return parent::isOwnedBy($user);
    }

}
