<?php

namespace DoctrineORMModule\Proxy\__CG__\Sc\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Dog extends \Sc\Entity\Dog implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'locale', 'name', 'user', 'breed', 'color', 'gender', 'weightkg', 'birthdate', 'medias', 'media', 'whythisdog');
        }

        return array('__isInitialized__', 'id', 'locale', 'name', 'user', 'breed', 'color', 'gender', 'weightkg', 'birthdate', 'medias', 'media', 'whythisdog');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Dog $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\User\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function hasUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasUser', array());

        return parent::hasUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setWhythisdog($whythisdog = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWhythisdog', array($whythisdog));

        return parent::setWhythisdog($whythisdog);
    }

    /**
     * {@inheritDoc}
     */
    public function getWhythisdog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWhythisdog', array());

        return parent::getWhythisdog();
    }

    /**
     * {@inheritDoc}
     */
    public function setBreed($breed = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBreed', array($breed));

        return parent::setBreed($breed);
    }

    /**
     * {@inheritDoc}
     */
    public function getBreed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBreed', array());

        return parent::getBreed();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor($color = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', array($color));

        return parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', array());

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setGender($gender = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGender', array($gender));

        return parent::setGender($gender);
    }

    /**
     * {@inheritDoc}
     */
    public function getGender()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGender', array());

        return parent::getGender();
    }

    /**
     * {@inheritDoc}
     */
    public function setWeightkg($weightkg = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWeightkg', array($weightkg));

        return parent::setWeightkg($weightkg);
    }

    /**
     * {@inheritDoc}
     */
    public function getWeightkg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWeightkg', array());

        return parent::getWeightkg();
    }

    /**
     * {@inheritDoc}
     */
    public function setMedia(\Blog\Entity\Media $media = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMedia', array($media));

        return parent::setMedia($media);
    }

    /**
     * {@inheritDoc}
     */
    public function getMedia()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedia', array());

        return parent::getMedia();
    }

    /**
     * {@inheritDoc}
     */
    public function hasMedia()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasMedia', array());

        return parent::hasMedia();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, $params)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', array($method, $params));

        return parent::__call($method, $params);
    }

    /**
     * {@inheritDoc}
     */
    public function getThing($what)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThing', array($what));

        return parent::getThing($what);
    }

    /**
     * {@inheritDoc}
     */
    public function getThings($what)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThings', array($what));

        return parent::getThings($what);
    }

    /**
     * {@inheritDoc}
     */
    public function hasthings($what)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasthings', array($what));

        return parent::hasthings($what);
    }

    /**
     * {@inheritDoc}
     */
    public function addThing($what, $thing)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addThing', array($what, $thing));

        return parent::addThing($what, $thing);
    }

    /**
     * {@inheritDoc}
     */
    public function addThings($what, \Doctrine\Common\Collections\Collection $things)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addThings', array($what, $things));

        return parent::addThings($what, $things);
    }

    /**
     * {@inheritDoc}
     */
    public function removeThing($what, $thing)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeThing', array($what, $thing));

        return parent::removeThing($what, $thing);
    }

    /**
     * {@inheritDoc}
     */
    public function removeThings($what, \Doctrine\Common\Collections\Collection $things)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeThings', array($what, $things));

        return parent::removeThings($what, $things);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllThings($what)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllThings', array($what));

        return parent::removeAllThings($what);
    }

    /**
     * {@inheritDoc}
     */
    public function setBirthdate(\DateTime $time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBirthdate', array($time));

        return parent::setBirthdate($time);
    }

    /**
     * {@inheritDoc}
     */
    public function getBirthdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBirthdate', array());

        return parent::getBirthdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', array($locale));

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLocale', array());

        return parent::hasLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', array());

        return parent::getLocale();
    }

}
